var Game;(function(n){var t=function(){function t(n){this._x=n.worldX,this._y=n.worldY}return t.prototype.setGameBoard=function(n){this._gameBoard=n},t.prototype.canMove=function(){return!1},t.prototype.getWorldX=function(){return this._group.getX()},t.prototype.getWorldY=function(){return this._group.getY()},t.prototype.getKineticGroup=function(){return this._group=new Kinetic.Group({x:this._x,y:this._y}),this._group},t.prototype.setParentLayer=function(n,t,i){this._parentLayer=n,this._parentLayerOffsetX=t,this._parentLayerOffsetY=i},t.prototype.draw=function(){if(!this._parentLayer)throw new Error("_parentLayer is null. Must call setParentLayer first.");this._parentLayer.draw()},t.prototype.move=function(n,t,i){if(this._group==undefined)throw new Error("moveTo() _group undefined. Did you forget to call 'super.getKineticGroup()' in the overloaded getKineticGroup() method?");if(i.pixelsPerSecond){var r=Math.abs(this._group.getX()-n),u=Math.abs(this._group.getY()-t),f=Math.sqrt(r*r+u*u),e=f/i.pixelsPerSecond;this._group.transitionTo({x:n,y:t,duration:e})}else this._group.move(r,u),this.draw()},t.prototype.addImage=function(n){var i,t,r,u;if(!this._group)throw new Error("_group must be defined before calling addImage.");return i=this,t={},t.imageObj=new Image,(r=n.x)===undefined&&(r=n.width/-2),(u=n.y)===undefined&&(u=n.height/-2),t.KineticImage=new Kinetic.Image({x:r,y:u,image:t.imageObj,width:n.width,height:n.height}),n.offset&&t.KineticImage.setOffset(n.offset[0],n.offset[1]),t.imageObj.onload=function(){n.group===undefined?i._group.add(t.KineticImage):n.group.add(t.KineticImage),i.draw(),n.onLoadPostDraw&&n.onLoadPostDraw()},t.imageObj.src=n.url,t},t.prototype.tick=function(){this._x=this._group.getX(),this._y=this._group.getY()},t.prototype.findEntities=function(t){for(var f=[],o=this._gameBoard.entities.length,i,u,e,r=0;r<o;r++)(i=this._gameBoard.entities[r],i!==this)&&(u=n.Utilities.distanceBetweenPoints(this.getWorldX(),this.getWorldY(),i.getWorldX(),i.getWorldY()),e=n.Utilities.radiansBetweenPoints(i.getWorldX(),i.getWorldY(),this.getWorldX(),this.getWorldY()),u<t&&f.push({distance:u,entity:i,radiansToEntity:e}));return f},t}();n.Entity=t})(Game||(Game={}))