var Game;(function(n){var t=function(){function t(n){this._health=256,this._gunDamage=16,this._x=n.worldX,this._y=n.worldY}return t.prototype.setGameBoard=function(n){this._gameBoard=n},t.prototype.canMove=function(){return!1},t.prototype.getWorldX=function(){return this._group.getX()},t.prototype.getWorldY=function(){return this._group.getY()},t.prototype.getKineticGroup=function(){return this._group=new Kinetic.Group({x:this._x,y:this._y}),this._group},t.prototype.setParentLayer=function(n,t,i){this._parentLayer=n,this._parentLayerOffsetX=t,this._parentLayerOffsetY=i},t.prototype.draw=function(){if(!this._parentLayer)throw new Error("_parentLayer is null. Must call setParentLayer first.");this._parentLayer.draw()},t.prototype.move=function(n,t,i){if(this._group==undefined)throw new Error("moveTo() _group undefined. Did you forget to call 'super.getKineticGroup()' in the overloaded getKineticGroup() method?");if(i.pixelsPerSecond){var r=Math.abs(this._group.getX()-n),u=Math.abs(this._group.getY()-t),f=Math.sqrt(r*r+u*u),e=f/i.pixelsPerSecond;this._group.transitionTo({x:n,y:t,duration:e})}else this._group.move(r,u),this.draw()},t.prototype.addImage=function(n){var i,t,r,u;if(!this._group)throw new Error("_group must be defined before calling addImage.");return i=this,t={},t.imageObj=new Image,(r=n.x)===undefined&&(r=n.width/-2),(u=n.y)===undefined&&(u=n.height/-2),t.KineticImage=new Kinetic.Image({x:r,y:u,image:t.imageObj,width:n.width,height:n.height}),n.offset&&t.KineticImage.setOffset(n.offset.x,n.offset.y),t.imageObj.onload=function(){n.group===undefined?i._group.add(t.KineticImage):n.group.add(t.KineticImage),i.draw(),n.onLoadPostDraw&&n.onLoadPostDraw()},t.imageObj.src=n.url,t},t.prototype.tick=function(){this._x=this._group.getX(),this._y=this._group.getY()},t.prototype.findEntities=function(t,i){var f,o,u,r,e,s;if(!this.isDead()){for(f=[],o=this._gameBoard.entities.length,u=0;u<o;u++)(r=this._gameBoard.entities[u],r!==this)&&(i&&r.isDead()||(e=n.Utilities.distanceBetweenPoints(this.getWorldX(),this.getWorldY(),r.getWorldX(),r.getWorldY()),s=n.Utilities.radiansBetweenPoints(r.getWorldX(),r.getWorldY(),this.getWorldX(),this.getWorldY()),e<t&&f.push({distance:e,entity:r,radiansToEntity:s})));return f}},t.prototype.shoot=function(t){var s=this,h=this,o;if(!(this._shoot_lastShotFired<new Date(Date.now()+t.timeBetweenShots*1e3))){this._shoot_lastShotFired=new Date(Date.now());var y=n.Utilities.radiansBetweenPoints(this.getWorldX(),this.getWorldY(),t.targetX,t.targetY),i=new Kinetic.Group,c=this.getWorldX(),l=this.getWorldY(),r=new Kinetic.Circle({x:c-this._group.getX(),y:l-this._group.getY(),fill:"black",radius:1});i.add(r);var a=n.Utilities.randomInteger(80,!0),v=n.Utilities.randomInteger(80,!0),f=t.targetX-this._group.getX()+a,e=t.targetY-this._group.getY()+v,u=h.addImage({url:"/Images/GameAssets/BulletImpact-1.png",x:f,y:e,width:4,height:4,group:i});u.KineticImage.hide(),this._group.add(i),this.draw(),o=n.Utilities.distanceBetweenPoints(this.getWorldX(),this.getWorldY(),t.targetX,t.targetY),r.transitionTo({x:f,y:e,duration:o/250,callback:function(){t.entityShootingAt&&t.entityShootingAt.takeDamage(s._gunDamage),r.hide(),u.KineticImage.show(),u.KineticImage.transitionTo({width:32,height:32,opacity:.9,offset:{x:16,y:16},duration:.15,callback:function(){i.remove()}})}})}},t.prototype.takeDamage=function(n){this._health-=n,this.isDead()&&this.entityKilled()},t.prototype.entityKilled=function(){this._health=0,this._group.removeChildren(),this.draw()},t.prototype.isDead=function(){return this._health<=0},t}();n.Entity=t})(Game||(Game={})),QUnit.module("Entity"),QUnit.testDone(function(){destroyTestGameBoard()}),QUnit.test("constructor",function(){var n=new Game.Entity({worldX:400,worldY:500});QUnit.strictEqual(400,n._x,"_x"),QUnit.strictEqual(500,n._y,"_y")}),QUnit.test("findEntities",function(){var t=setupTestGameBoard(),n=new Game.Entity({worldX:0,worldY:0}),u=new Game.Entity({worldX:0,worldY:500}),i,r;t.addEntity(n),t.addEntity(u),i=n.findEntities(100),QUnit.strictEqual(0,i.length,"entities out of range"),r=n.findEntities(600),QUnit.strictEqual(1,r.length,"one entity in range")}),QUnit.test("getX and getY",function(){var t=setupTestGameBoard(),n=new Game.Entity({worldX:250,worldY:60});t.addEntity(n),QUnit.strictEqual(250,n.getWorldX(),"getWorldX"),QUnit.strictEqual(60,n.getWorldY(),"getWorldY")})